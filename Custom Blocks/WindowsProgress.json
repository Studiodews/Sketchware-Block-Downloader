[{"name":"WindowsProgressLib","palette":"57","spec":"##WindowsProgressLibMoreblock##","type":" ","code":"}\npublic static class WP7ProgressBar extends LinearLayout {\r\n    private static final int INTERVAL_DEF \u003d 150;\r\n    private static final int INDICATOR_COUNT_DEF \u003d 5;\r\n    private static final int ANIMATION_DURATION_DEF \u003d 2200;\r\n    private static final int INDICATOR_HEIGHT_DEF \u003d 5;\r\n    private static final int INDICATOR_RADIUS_DEF \u003d 0;\r\n    private int interval;\r\n    private int animationDuration;\r\n    private int indicatorHeight;\r\n    private int indicatorColor;\r\n    private int indicatorRadius;\r\n    private boolean isShowing \u003d false;\r\n    private ArrayList\u003cWP7Indicator\u003e WP7Indicators;\r\n    private Handler handler;\r\n    private int progressBarCount \u003d 0;\r\n    private ObjectAnimator objectAnimator;\r\n    public WP7ProgressBar(Context context) {\r\n        super(context);\r\n        initialize(null);\r\n    }\r\n    public WP7ProgressBar(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        initialize(attrs);\r\n    }\r\n    public WP7ProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        initialize(attrs);\r\n    }\r\n    private void initialize(AttributeSet attrs) {\r\n        this.setGravity(Gravity.CENTER);\r\n        this.setOrientation(HORIZONTAL);\r\n        this.handler \u003d new Handler();\r\n        setAttributes(attrs);\r\n        initializeIndicators();\r\n    }\r\n    private void setAttributes(AttributeSet attributeSet) {\r\n        //TypedArray typedArray \u003d getContext().obtainStyledAttributes(attributeSet, R.styleable.WP7ProgressBar);\r\n        interval \u003d INTERVAL_DEF;\r\n        animationDuration \u003d ANIMATION_DURATION_DEF;\r\n        indicatorHeight \u003d INDICATOR_HEIGHT_DEF;\r\n        indicatorRadius \u003d INDICATOR_RADIUS_DEF;\r\n        indicatorColor \u003d Color.BLUE; //Context.getColor(getContext(), R.color.colorAccent);\r\n        //typedArray.recycle();\r\n    }\r\n    private void showAnimation() {\r\n        for (int i \u003d 0; i \u003c WP7Indicators.size(); i++) {\r\n            WP7Indicators.get(i).startAnim(animationDuration, (5 - i) * interval);\r\n        }\r\n    }\r\n    private void initializeIndicators() {\r\n        this.removeAllViews();\r\n        ArrayList\u003cWP7Indicator\u003e WP7Indicators \u003d new ArrayList\u003c\u003e();\r\n        for (int i \u003d 0; i \u003c INDICATOR_COUNT_DEF; i++) {\r\n            WP7Indicator WP7Indicator \u003d new WP7Indicator(getContext(), indicatorHeight, indicatorColor, indicatorRadius);\r\n            WP7Indicators.add(WP7Indicator);\r\n            this.addView(WP7Indicator);\r\n        }\r\n        this.WP7Indicators \u003d WP7Indicators;\r\n    }\r\n    private void show() {\r\n        if (isShowing)\r\n            return;\r\n        isShowing \u003d true;\r\n        showAnimation();\r\n    }\r\n    private void hide() {\r\n        clearIndicatorsAnimations();\r\n        isShowing \u003d false;\r\n    }\r\n    private void startWholeViewAnimation() {\r\n        objectAnimator \u003d ObjectAnimator.ofFloat(this, \"translationX\", -200, 200);\r\n        objectAnimator.setInterpolator(new LinearInterpolator());\r\n        objectAnimator.setDuration(animationDuration + (5 * interval));\r\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\r\n        objectAnimator.setRepeatCount(ValueAnimator.INFINITE);\r\n        objectAnimator.start();\r\n    }\r\n    private void hideWholeViewAnimation() {\r\n        objectAnimator.removeAllListeners();\r\n        objectAnimator.cancel();\r\n        objectAnimator.end();\r\n    }\r\n    private void clearIndicatorsAnimations() {\r\n        for (WP7Indicator WP7Indicator : WP7Indicators) {\r\n            WP7Indicator.removeAnim();\r\n        }\r\n    }\r\n    public void showProgressBar() {\r\n        progressBarCount++;\r\n        if (progressBarCount \u003d\u003d 1) {\r\n            handler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    WP7ProgressBar.this.show();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public void hideProgressBar() {\r\n        progressBarCount--;\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (progressBarCount \u003d\u003d 0) {\r\n                    WP7ProgressBar.this.hide();\r\n                }\r\n            }\r\n        }, 50);\r\n    }\r\n    public void setInterval(int interval) {\r\n        this.interval \u003d interval;\r\n        initializeIndicators();\r\n    }\r\n    public void setAnimationDuration(int animationDuration) {\r\n        this.animationDuration \u003d animationDuration;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorHeight(int indicatorHeight) {\r\n        this.indicatorHeight \u003d indicatorHeight;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorColor(int indicatorColor) {\r\n        this.indicatorColor \u003d indicatorColor;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorRadius(int indicatorRadius) {\r\n        this.indicatorRadius \u003d indicatorRadius;\r\n        initializeIndicators();\r\n    }\r\n}\r\n\r\npublic static class WP10ProgressBar extends RelativeLayout {\r\n    private static final int INTERVAL_DEF \u003d 150;\r\n    private static final int INDICATOR_COUNT_DEF \u003d 5;\r\n    private static final int ANIMATION_DURATION_DEF \u003d 1800;\r\n    private static final int INDICATOR_HEIGHT_DEF \u003d 7;\r\n    private static final int INDICATOR_RADIUS_DEF \u003d 0;\r\n    private int interval;\r\n    private int animationDuration;\r\n    private int indicatorHeight;\r\n    private int indicatorColor;\r\n    private int indicatorRadius;\r\n    private boolean isShowing \u003d false;\r\n    private ArrayList\u003cWP10Indicator\u003e wp10Indicators;\r\n    private Handler handler;\r\n    private int progressBarCount \u003d 0;\r\n    public WP10ProgressBar(Context context) {\r\n        super(context);\r\n        initialize(null);\r\n    }\r\n    public WP10ProgressBar(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        initialize(attrs);\r\n    }\r\n    public WP10ProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        initialize(attrs);\r\n    }\r\n    private void initialize(AttributeSet attrs) {\r\n        this.setGravity(Gravity.CENTER);\r\n        this.handler \u003d new Handler();\r\n        this.setRotation(-25);\r\n        setAttributes(attrs);\r\n        initializeIndicators();\r\n    }\r\n    private void setAttributes(AttributeSet attributeSet) {\r\n        //TypedArray typedArray \u003d getContext().obtainStyledAttributes(attributeSet, R.styleable.WP10ProgressBar);\r\n        interval \u003d INTERVAL_DEF;\r\n        animationDuration \u003d ANIMATION_DURATION_DEF;\r\n        indicatorHeight \u003d INDICATOR_HEIGHT_DEF;\r\n        indicatorRadius \u003d INDICATOR_RADIUS_DEF;\r\n        indicatorColor \u003d Color.BLUE;\r\n    }\r\n    private void showAnimation() {\r\n        for (int i \u003d 0; i \u003c wp10Indicators.size(); i++) {\r\n            wp10Indicators.get(i).startAnim(animationDuration, (5 - i) * interval);\r\n        }\r\n    }\r\n    private void initializeIndicators() {\r\n        this.removeAllViews();\r\n        ArrayList\u003cWP10Indicator\u003e WP10Indicators \u003d new ArrayList\u003c\u003e();\r\n        for (int i \u003d 0; i \u003c INDICATOR_COUNT_DEF; i++) {\r\n            WP10Indicator wp10Indicator \u003d new WP10Indicator(getContext(), indicatorHeight, indicatorColor, indicatorRadius, i);\r\n            WP10Indicators.add(wp10Indicator);\r\n            this.addView(wp10Indicator);\r\n        }\r\n        this.wp10Indicators \u003d WP10Indicators;\r\n    }\r\n    private void show() {\r\n        if (isShowing)\r\n            return;\r\n        isShowing \u003d true;\r\n        showAnimation();\r\n    }\r\n    private void hide() {\r\n        clearIndicatorsAnimations();\r\n        isShowing \u003d false;\r\n    }\r\n    private void clearIndicatorsAnimations() {\r\n        for (WP10Indicator wp10Indicator : wp10Indicators) {\r\n            wp10Indicator.removeAnim();\r\n        }\r\n    }\r\n    public void showProgressBar() {\r\n        progressBarCount++;\r\n        if (progressBarCount \u003d\u003d 1) {\r\n            handler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    WP10ProgressBar.this.show();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public void hideProgressBar() {\r\n        progressBarCount--;\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (progressBarCount \u003d\u003d 0) {\r\n                    WP10ProgressBar.this.hide();\r\n                }\r\n            }\r\n        }, 50);\r\n    }\r\n    public void setInterval(int interval) {\r\n        this.interval \u003d interval;\r\n        initializeIndicators();\r\n    }\r\n    public void setAnimationDuration(int animationDuration) {\r\n        this.animationDuration \u003d animationDuration;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorHeight(int indicatorHeight) {\r\n        this.indicatorHeight \u003d indicatorHeight;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorColor(int indicatorColor) {\r\n        this.indicatorColor \u003d indicatorColor;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorRadius(int indicatorRadius) {\r\n        this.indicatorRadius \u003d indicatorRadius;\r\n        initializeIndicators();\r\n    }\r\n}\r\n\r\n\r\npublic static class Base10Indicator extends View {\r\n    private int color;\r\n    public Base10Indicator(Context context, int indicatorHeight, int color, int radius) {\r\n        super(context);\r\n        this.color \u003d color;\r\n        initialize(indicatorHeight, radius);\r\n    }\r\n    private void initialize(int indicatorHeight, int radius) {\r\n        this.setBackground(getCube(radius));\r\n        LinearLayout.LayoutParams layoutParams \u003d new LinearLayout.LayoutParams(Utils.px2dp(getContext(), indicatorHeight), Utils.px2dp(getContext(), indicatorHeight));\r\n        this.setLayoutParams(layoutParams);\r\n    }\r\n    private android.graphics.drawable.GradientDrawable getCube(int radius) {\r\n        android.graphics.drawable.GradientDrawable drawable \u003d new android.graphics.drawable.GradientDrawable();\r\n        drawable.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);\r\n        drawable.setColor(color);\r\n        drawable.setCornerRadius(Utils.px2dp(getContext(), radius));\r\n        return drawable;\r\n    }\r\n}\r\n\r\npublic static class Utils {\r\n    public static int px2dp(Context context, int px) {\r\n        float scale \u003d context.getResources().getDisplayMetrics().density;\r\n        return (int) (px * scale + 0.5f);\r\n    }\r\n}\r\n\r\nstatic class WP7Indicator extends View {\r\n    private ObjectAnimator objectAnimator;\r\n    private int color;\r\n    public WP7Indicator(Context context, int indicatorHeight, int color, int radius) {\r\n        super(context);\r\n        this.color \u003d color;\r\n        initialize(indicatorHeight, radius);\r\n    }\r\n    private void initialize(int indicatorHeight, int radius) {\r\n        this.setBackground(getCube(radius));\r\n        LinearLayout.LayoutParams layoutParams \u003d new LinearLayout.LayoutParams(Utils.px2dp(getContext(), indicatorHeight), Utils.px2dp(getContext(), indicatorHeight));\r\n        layoutParams.rightMargin \u003d Utils.px2dp(getContext(), (int) (1.5f * indicatorHeight));\r\n        this.setLayoutParams(layoutParams);\r\n        startAnim(0, 0);\r\n        removeAnim();\r\n    }\r\n    private android.graphics.drawable.GradientDrawable getCube(int radius) {\r\n        android.graphics.drawable.GradientDrawable drawable \u003d new android.graphics.drawable.GradientDrawable();\r\n        drawable.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);\r\n        drawable.setColor(color);\r\n        drawable.setCornerRadius(Utils.px2dp(getContext(), radius));\r\n        return drawable;\r\n    }\r\n    public void startAnim(long animationDuration, long delay) {\r\n        objectAnimator \u003d ObjectAnimator.ofFloat(this, \"translationX\", +1000, -1000);\r\n        objectAnimator.setInterpolator(new WPInterpolator());\r\n        objectAnimator.setDuration(animationDuration);\r\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\r\n        objectAnimator.setRepeatCount(ValueAnimator.INFINITE);\r\n        objectAnimator.setStartDelay(delay);\r\n        objectAnimator.start();\r\n    }\r\n    public void removeAnim() {\r\n        objectAnimator.removeAllListeners();\r\n        objectAnimator.cancel();\r\n        objectAnimator.end();\r\n    }\r\n}\r\n\r\npublic static class WP10Indicator extends RelativeLayout {\r\n    private Base10Indicator base10Indicator;\r\n    private ObjectAnimator objectAnimator;\r\n    private int number;\r\n    public WP10Indicator(Context context, int indicatorHeight, int color, int radius, int number) {\r\n        super(context);\r\n        initialize(indicatorHeight, color, radius, number);\r\n    }\r\n    private void initialize(int indicatorHeight, int color, int radius, int number) {\r\n        this.number \u003d number;\r\n        this.base10Indicator \u003d new Base10Indicator(getContext(), indicatorHeight, color, radius);\r\n        RelativeLayout.LayoutParams layoutParams \u003d new LayoutParams(Utils.px2dp(getContext(), indicatorHeight * 8),\r\n                Utils.px2dp(getContext(), indicatorHeight * 8));\r\n        this.setLayoutParams(layoutParams);\r\n        this.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);\r\n        this.addView(base10Indicator);\r\n        startAnim(0, 0);\r\n        removeAnim();\r\n        this.setAlpha(0f);\r\n    }\r\n    public void startAnim(final long animationDuration, final long delay) {\r\n        objectAnimator \u003d ObjectAnimator.ofFloat(this, \"rotation\", (number * 15), -360 + (number * 15));\r\n        objectAnimator.setInterpolator(new WPInterpolator());\r\n        objectAnimator.setDuration(animationDuration);\r\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\r\n        objectAnimator.setRepeatCount(2);\r\n        objectAnimator.addListener(new android.animation.Animator.AnimatorListener() {\r\n            @Override\r\n            public void onAnimationStart(android.animation.Animator animator) {\r\n                WP10Indicator.this.setAlpha(1f);\r\n                startAlphaAnimation(animationDuration);\r\n            }\r\n            @Override\r\n            public void onAnimationEnd(android.animation.Animator animator) {\r\n                removeAnim();\r\n                startAnim(animationDuration, 0);\r\n            }\r\n            @Override\r\n            public void onAnimationCancel(android.animation.Animator animator) {\r\n            }\r\n            @Override\r\n            public void onAnimationRepeat(android.animation.Animator animator) {\r\n            }\r\n        });\r\n        objectAnimator.setStartDelay(delay);\r\n        objectAnimator.start();\r\n    }\r\n    public void startAlphaAnimation(long animationDuration) {\r\n        this.animate().alpha(0).setDuration(animationDuration / 12).setStartDelay(2 * animationDuration);\r\n    }\r\n    public void removeAnim() {\r\n        this.animate().alpha(0f).setDuration(0).setStartDelay(0);\r\n        objectAnimator.removeAllListeners();\r\n        objectAnimator.cancel();\r\n        objectAnimator.end();\r\n    }\r\n}\r\n\r\npublic static class WPInterpolator implements android.view.animation.Interpolator {\r\n    @Override\r\n    public float getInterpolation(float v) {\r\n        if (v \u003e 0.3f \u0026\u0026 v \u003c 0.70f)\r\n            return (float) ((-(v - 0.5) / 6) + 0.5f);\r\n        return (float) ((-4) * Math.pow(v - 0.5, 3) + 0.5);\r\n    }\r\n}\n{"},{"name":"CreateWin7","palette":"57","spec":"%m.view Create Win7 Progress ID %s.inputOnly","type":" ","code":"WP7ProgressBar %2$s \u003d new WP7ProgressBar(this);\r\n%2$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT));\r\n%1$s.addView(%2$s);"},{"name":"CreateWin10","palette":"57","spec":"%m.view Create Win10 Progress ID %s.inputOnly","type":" ","code":"WP10ProgressBar %2$s \u003d new WP10ProgressBar(this);\r\n%2$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));\r\n%1$s.addView(%2$s);"},{"name":"WinProgress show","palette":"57","spec":"WinProgress %s.inputOnly show","type":" ","code":"%1$s.showProgressBar();"},{"name":"WinProgress hide","palette":"57","spec":"WinProgress %s.inputOnly hide","type":" ","code":"%1$s.hideProgressBar();"}]