[{"name":"MKLoaderLibrary","palette":"44","spec":"\u003e\u003e\u003e\u003e\u003e %m.activity % %s.inputOnly MKLoaderLibrary \u003c\u003c\u003c\u003c","type":" ","typeName":"","color":"#2CA5E2","code":"\t\n\t\t\n}\n\t\t\tpublic class Arc extends GraphicObject {\n\t\t\t\tprivate android.graphics.RectF oval;\n\t\t\t\tprivate float startAngle;\n\t\t\t\tprivate float sweepAngle;\n\t\t\t\tprivate boolean useCenter;\n\n\t\t\t\tpublic void setOval(android.graphics.RectF oval) {\n\t\t\t\t\tthis.oval \u003d oval;\n\t\t\t\t}\n\n\t\t\t\tpublic void setStartAngle(float startAngle) {\n\t\t\t\t\tthis.startAngle \u003d startAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSweepAngle(float sweepAngle) {\n\t\t\t\t\tthis.sweepAngle \u003d sweepAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setUseCenter(boolean useCenter) {\n\t\t\t\t\tthis.useCenter \u003d useCenter;\n\t\t\t\t}\n\n\t\t\t\tpublic float getStartAngle() {\n\t\t\t\t\treturn startAngle;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Balloon extends LoaderView {\n\t\t\t\t@Override public void initializeObjects() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Circle extends GraphicObject {\n\t\t\t\tprivate PointF center;\n\t\t\t\tprivate float radius;\n\n\t\t\t\tpublic Circle() {\n\t\t\t\t\tcenter \u003d new PointF();\n\t\t\t\t}\n\n\t\t\t\tpublic void setRadius(float radius) {\n\t\t\t\t\tthis.radius \u003d radius;\n\t\t\t\t}\n\n\t\t\t\tpublic void setCenter(float x, float y) {\n\t\t\t\t\tcenter.set(x, y);\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawCircle(center.x, center.y, radius, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class ClassicSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\n\t\t\t\tpublic ClassicSpinner() {\n\t\t\t\t\tcirclesSize \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setAlpha(126);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class FishSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic FishSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 5;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class GraphicObject {\n\t\t\t\tprotected android.graphics.Paint paint;\n\n\t\t\t\tpublic GraphicObject() {\n\t\t\t\t\tpaint \u003d new android.graphics.Paint();\n\t\t\t\t\tpaint.setAntiAlias(true);\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tpaint.setColor(color);\n\t\t\t\t}\n\n\t\t\t\tpublic void setAlpha(int alpha) {\n\t\t\t\t\tpaint.setAlpha(alpha);\n\t\t\t\t}\n\n\t\t\t\tpublic void setWidth(float width) {\n\t\t\t\t\tpaint.setStrokeWidth(width);\n\t\t\t\t}\n\n\t\t\t\tpublic void setStyle(android.graphics.Paint.Style style) {\n\t\t\t\t\tpaint.setStyle(style);\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\t\t\t}\n\n\n\t\t\tpublic interface InvalidateListener {\n\t\t\t\tvoid reDraw();\n\t\t\t}\n\n\t\t\tpublic class InvalidNumberOfPulseException extends Exception {\n\n\t\t\t\t@Override public String getMessage() {\n\t\t\t\t\treturn \"The number of pulse must be between 2 and 6\";\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Line extends GraphicObject {\n\t\t\t\tprivate PointF point1;\n\t\t\t\tprivate PointF point2;\n\n\t\t\t\tpublic void setPoint1(PointF point1) {\n\t\t\t\t\tthis.point1 \u003d point1;\n\t\t\t\t}\n\n\t\t\t\tpublic void setPoint2(PointF point2) {\n\t\t\t\t\tthis.point2 \u003d point2;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint1() {\n\t\t\t\t\treturn point1;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint2() {\n\t\t\t\t\treturn point2;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawLine(point1.x, point1.y, point2.x, point2.y, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class LineSpinner extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLine;\n\n\t\t\t\tpublic LineSpinner() {\n\t\t\t\t\tnumberOfLine \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tint size \u003d Math.min(width, height);\n\t\t\t\t\tfloat lineWidth \u003d size / 10f;\n\t\t\t\t\tlines \u003d new Line[numberOfLine];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setAlpha(126);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(center.x, center.y - size / 2f + lineWidth));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(center.x, lines[i].getPoint1().y + 2 * lineWidth));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tlines[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class PhoneWave extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\n\t\t\t\tpublic PhoneWave() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setAlpha(126);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d + r / 3, center.x + d, center.y + d + r / 3));\n\t\t\t\t\t\tarcs[i].setStartAngle(225);\n\t\t\t\t\t\tarcs[i].setSweepAngle(90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tarcs[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Pulse extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLines;\n\t\t\t\tprivate float lineWidth;\n\t\t\t\tprivate float lineDistance;\n\t\t\t\tprivate float[] scaleY;\n\n\t\t\t\tpublic Pulse(int numberOfLines) throws InvalidNumberOfPulseException {\n\t\t\t\t\tif (numberOfLines \u003c 3 || numberOfLines \u003e 5) {\n\t\t\t\t\t\tthrow new InvalidNumberOfPulseException();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.numberOfLines \u003d numberOfLines;\n\t\t\t\t\tlines \u003d new Line[numberOfLines];\n\t\t\t\t\tscaleY \u003d new float[numberOfLines];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tlineWidth \u003d width / (2 * numberOfLines);\n\t\t\t\t\tlineDistance \u003d lineWidth / 4f;\n\t\t\t\t\tfloat firstX \u003d (width - (lineWidth * numberOfLines + lineDistance * (numberOfLines - 1))) / 2f + lineWidth / 2f;\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(firstX, center.y - height / 4f));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(firstX, center.y + height / 4f));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 1.5f, 1f);\n\t\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\t\tscaleAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tscaleY[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tscaleAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(i * (lineWidth + lineDistance), 0);\n\t\t\t\t\t\tcanvas.scale(1, scaleY[i], lines[i].getPoint1().x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Radar extends LoaderView {\n\t\t\t\tprivate Line line;\n\t\t\t\tprivate float degree;\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tline \u003d new Line();\n\t\t\t\t\tline.setPoint1(center);\n\t\t\t\t\tline.setPoint2(new PointF(0, size / 2f));\n\t\t\t\t\tline.setColor(color);\n\t\t\t\t\tline.setWidth(5);\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator animator \u003d android.animation.ValueAnimator.ofFloat(0, 359);\n\t\t\t\t\tanimator.setDuration(1000);\n\t\t\t\t\tanimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tanimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tdegree \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tanimator.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.rotate(degree, center.x, center.y);\n\t\t\t\t\tline.draw(canvas);\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Sharingan extends LoaderView {\n\t\t\t\tprivate Circle eye;\n\t\t\t\tprivate Circle eyeBound;\n\t\t\t\tprivate Circle[] sharingans;\n\t\t\t\tprivate int numberOfSharingan;\n\t\t\t\tprivate float rotate;\n\t\t\t\tprivate float scale;\n\t\t\t\tprivate float eyeBoundRadius;\n\t\t\t\tprivate float eyeBoundRadiusScale;\n\n\t\t\t\tpublic Sharingan() {\n\t\t\t\t\tnumberOfSharingan \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\teyeBoundRadius \u003d r / 1.5f;\n\n\t\t\t\t\teye \u003d new Circle();\n\t\t\t\t\teye.setCenter(center.x, center.y);\n\t\t\t\t\teye.setColor(color);\n\t\t\t\t\teye.setRadius(r / 4);\n\n\t\t\t\t\teyeBound \u003d new Circle();\n\t\t\t\t\teyeBound.setCenter(center.x, center.y);\n\t\t\t\t\teyeBound.setColor(color);\n\t\t\t\t\teyeBound.setRadius(eyeBoundRadius);\n\t\t\t\t\teyeBound.setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\teyeBound.setWidth(r / 20f);\n\n\t\t\t\t\tsharingans \u003d new Circle[numberOfSharingan];\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tsharingans[i] \u003d new Circle();\n\t\t\t\t\t\tsharingans[i].setCenter(center.x, center.y - eyeBoundRadius);\n\t\t\t\t\t\tsharingans[i].setColor(color);\n\t\t\t\t\t\tsharingans[i].setRadius(r / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator rotateAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\trotateAnimator.setDuration(1500);\n\t\t\t\t\trotateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\trotateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\trotate \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 0.8f, 1f);\n\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tscale \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.AnimatorSet animatorSet \u003d new android.animation.AnimatorSet();\n\t\t\t\t\tanimatorSet.play(rotateAnimator).with(scaleAnimator);\n\t\t\t\t\tanimatorSet.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.scale(scale, scale, center.x, center.y);\n\t\t\t\t\tcanvas.rotate(rotate, center.x, center.y);\n\t\t\t\t\teye.draw(canvas);\n\t\t\t\t\teyeBound.draw(canvas);\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(i * 120, center.x, center.y);\n\t\t\t\t\t\tsharingans[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class TwinFishesSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic TwinFishesSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 10;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle / 2; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (int i \u003d numberOfCircle / 2; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, size - circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * (i - 5) / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay((index \u003e\u003d 5 ? index - 5 : index) * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Whirlpool extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic Whirlpool() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\t\t\t\t\trotates \u003d new float[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d, center.x + d, center.y + d));\n\t\t\t\t\t\tarcs[i].setStartAngle(i * 45);\n\t\t\t\t\t\tarcs[i].setSweepAngle(i * 45 + 90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d numberOfArc - 1; i \u003e\u003d 0; i--) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(arcs[i].getStartAngle(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   arcs[i].getStartAngle() + 360* (i %2$s 2 \u003d\u003d 0 ? -1 : 1));\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration((i + 1) * 500);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Worm extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\t\t\t\tprivate float radius;\n\t\t\t\tprivate int[] transformations;\n\n\t\t\t\tpublic Worm() {\n\t\t\t\t\tcirclesSize \u003d 5;\n\t\t\t\t\ttransformations \u003d new int[]{-2, -1, 0, 1, 2};\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\t\t\t\t\tradius \u003d width / 10f - width / 100f;\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(radius);\n\t\t\t\t\t\tcircles[i].setCenter(center.x, center.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator translateAnimator \u003d android.animation.ValueAnimator.ofFloat(center.y, height / 4f, height * 3 / 4f, center.y);\n\t\t\t\t\t\ttranslateAnimator.setDuration(1000);\n\t\t\t\t\t\ttranslateAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\ttranslateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\ttranslateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setCenter(center.x, (float)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\ttranslateAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(2 * radius * transformations[i], 0);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class LoaderView {\n\t\t\t\tprotected int color;\n\t\t\t\tprotected int width, height;\n\t\t\t\tprotected int desiredWidth, desiredHeight;\n\t\t\t\tprotected PointF center;\n\t\t\t\tprotected InvalidateListener invalidateListener;\n\n\t\t\t\tpublic LoaderView() {\n\t\t\t\t\tthis.desiredWidth \u003d 150;\n\t\t\t\t\tthis.desiredHeight \u003d 150;\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tthis.color \u003d color;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSize(int width, int height) {\n\t\t\t\t\tthis.width \u003d width;\n\t\t\t\t\tthis.height \u003d height;\n\t\t\t\t\tthis.center \u003d new PointF(width / 2.0f, height / 2.0f);\n\t\t\t\t}\n\n\t\t\t\tpublic void setInvalidateListener(InvalidateListener invalidateListener) {\n\t\t\t\t\tthis.invalidateListener \u003d invalidateListener;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredWidth() {\n\t\t\t\t\treturn desiredWidth;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredHeight() {\n\t\t\t\t\treturn desiredHeight;\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void initializeObjects();\n\n\t\t\t\tpublic abstract void setUpAnimation();\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\n\t\t\t\tpublic boolean isDetached() {\n\t\t\t\t\treturn invalidateListener \u003d\u003d null;\n\t\t\t\t}\n\n\t\t\t\tpublic void onDetach() {\n\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\tinvalidateListener \u003d null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic static class LoaderGenerator {\n\t\t\t\tpublic static LoaderView generateLoaderView(int type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase 9:\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase 10:\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase 11:\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic static LoaderView generateLoaderView(String type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase \"ClassicSpinner\":\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase \"FishSpinner\":\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase \"LineSpinner\":\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase \"ThreePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FourPulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FivePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"Radar\":\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase \"TwinFishesSpinner\":\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase \"Worm\":\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase \"Whirlpool\":\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase \"PhoneWave\":\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase \"Sharingan\":\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class MKLoader extends View implements InvalidateListener {\n\t\t\t\tprivate int setLoaderType;\n\t\t\t\tprivate int setLoaderColor;\n\t\t\t\tprivate LoaderView loaderView;\n\n\t\t\t\tpublic MKLoader(Context context) {\n\t\t\t\t\tsuper(context);\n\t\t\t\t\tinitialize(context, null, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs) {\n\t\t\t\t\tsuper(context, attrs);\n\t\t\t\t\tinitialize(context, attrs, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\tsuper(context, attrs, defStyleAttr);\n\t\t\t\t\tinitialize(context, attrs, defStyleAttr);\n\t\t\t\t}\n\n\t\t\t\tprivate void initialize(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\t//TypedArray typedArray \u003d context.obtainStyledAttributes(attrs, R.styleable.MKLoader);\n\t\t\t\t\t//int loaderType \u003d typedArray.getInt(R.styleable.MKLoader_mk_type,-1);\n\t\t\t\t\t//int loaderType \u003d -1;\n\t\t\t\t\t//loaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t\t//loaderView.setColor(Color.parseColor(\"#ffffff\"));\n\t\t\t\t\t//loaderView.setColor(typedArray.getColor(R.styleable.MKLoader_mk_color, Color.parseColor(\"#ffffff\")));\n\t\t\t\t\t//typedArray.recycle();\n\t\t\t\t}\n\n\t\t\t\tpublic void setType(int _type) {\n\t\t\t\t\tthis.setLoaderType \u003d _type;\n\t\t\t\t\tloaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t}\n\t\t\t\tpublic void setColor(int _color) {\n\t\t\t\t\tthis.setLoaderColor \u003d _color;\n\t\t\t\t\tloaderView.setColor(setLoaderColor);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\t\t\t\tfinal int measuredWidth \u003d resolveSize(loaderView.getDesiredWidth(), widthMeasureSpec);\n\t\t\t\t\tfinal int measuredHeight \u003d resolveSize(loaderView.getDesiredHeight(), heightMeasureSpec);\n\n\t\t\t\t\tsetMeasuredDimension(measuredWidth, measuredHeight);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n\t\t\t\t\tsuper.onLayout(changed, left, top, right, bottom);\n\t\t\t\t\tloaderView.setSize(getWidth(), getHeight());\n\t\t\t\t\tloaderView.initializeObjects();\n\t\t\t\t\tloaderView.setUpAnimation();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDraw(android.graphics.Canvas canvas) {\n\t\t\t\t\tsuper.onDraw(canvas);\n\t\t\t\t\tloaderView.draw(canvas);\n\t\t\t\t}\n\n\t\t\t\t@Override public void reDraw() {\n\t\t\t\t\tinvalidate();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onAttachedToWindow() {\n\t\t\t\t\tsuper.onAttachedToWindow();\n\t\t\t\t\tif (loaderView !\u003d null \u0026\u0026 loaderView.isDetached()) {\n\t\t\t\t\t\tloaderView.setInvalidateListener(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDetachedFromWindow() {\n\t\t\t\t\tsuper.onDetachedFromWindow();\n\t\t\t\t\tif (loaderView !\u003d null) {\n\t\t\t\t\t\tloaderView.onDetach();\n\t\t\t\t\t}\n\t\t\t\t}"},{"name":"addMKLoader","palette":"44","spec":"%m.view addMKLoader %m.activity type(0-11) %d  color %m.color","type":" ","typeName":"","color":"#2CA5E2","code":"{final MKLoader ag \u003d new MKLoader(%2$s.this);\nag.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\nag.setType(%3$s); //0-11\nag.setColor(%4$s);\n%1$s.addView(ag);}"}]